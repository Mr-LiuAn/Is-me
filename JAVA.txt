/**
 * 慕课网
 * JAVA入门 第一季
 * created date 2017-06-23(FRI)
 * created by mAZ
 */
===============
2017-06-23(FRI)
===============
Java开发环境搭建
第一步：安装JDK
下载：
http://www.oracle.com/technetwork/javase/download

默认安装在C盘
C:\Java

第二步：配置环境变量
JAVA_HOME		配置JDK安装路径
PATH			配置JDK命令文件的位置
CLASSPATH		配置类库文件的位置

控制面板-->所有控制面板项-->系统-->高级-->环境变量
JAVA_HOME	
C:\Java\jdk1.7.0_13

PATH		修改：变量值前加;
C:\Java\jbk1.7.0_13\bin;

CLASSPATH
.;C:\Java\jdk1.7.0_1\lib

检测搭建是否成功:
windows+R->CMD->java
会有java的用法
windows+R->CMD->javac
会有javac的用法


使用记事本编写Java程序：
myProgram.java->使用javac命令编译->myProgram.class->使用java命令解释

----------HelloWorld.java----------
public class HelloWorld{	//类名必须要和文件名一致
	public static void main(String[] args){
		System.out.println("welcome to imooc!");
	}
}
--------------------

windows+R->e:回车->javac HelloWorld.java（回车后，会编译生成HelloWorld.class文件）->java HelloWorld


使用Eclipse开发Java程序
下载：http://www.eclipse.org/downloads/
1.创建Java项目
2.创建程序包
3.编写Java源程序
4.运行Java程序


imooc	//1.创建Java项目。右键->new->java project->imooc->finish
imooc/src	
imooc/src/com.imooc		//2.创建程序包。右键->new->package->com.imooc
imooc/src/com.imooc/HelloWorld.java		//3.编写Java源程序。右键->new->class->HelloWorld.java	
----------HelloWorld.java----------
package com.imooc;			//编辑器自动生成
public class HelloWorld{	//编辑器自动生成
	public static void main(String[] args){		//自定义   main整个程序的入口
		System.out.println("I Love Imooc!");
	}
}
--------------------
4.运行Java程序
编辑文件空白地方->右键->Run As->Java Application
或工具栏的Run按钮


MyEclipse的使用简介
MyEclipse是对Eclipse的扩展，是一个十分优秀的用于开发Java,JavaEE的Eclipse插件集合。
下载：http://www.my-eclipse.cn


导入项目：
右键->Import->General->Existing Projects into Workspace->next->Select root directory:->Browse->finish

经验技巧分享
多练
多问
自己动手，调试错误
复习和总结

学虽容易，学好不易
且学且珍惜

注意：Java关键字是区分大小写的，所以void是关键字，但Void就不是了。

认识Java标识符：
标识符就是用于给Java程序中变量、类、方法等命名的符号。
使用标识符时，需要遵守几条规则：
1、标识符可以由字母、数字、下划线、美元符组成，但不能包含@、%、空格等其它特殊字符，不能以数字开头。
2、标识符不能是Java关键字和保留字。
3、标识符是严格区分大小写的。
4、标识符的命名最好能反映其作用，做到见名知意。


变量是什么：
简单的说，我们可以把变量看作是个盒子，可以将钥匙、手机、饮料等物品存放在这个盒子中，也可以在需要的时候换成我们想存放的新物品。
在Java中，我们通过三个元素描述变量：变量类型、变量名以及变量值。
----------Demo03----------
public class Demo03{
	public static void main(String[] args){
		String love="imooc";
		System.out.println("变量love的内容是："+love);	//代码结尾使用分号，使用"+"进行字符串和变量的拼接
		love="i love imooc";
		System.out.println("重新赋值后变量love的内容是："+love);
	}
}

--------------------

如何命名Java变量
1、不能以数字开头。
2、不能以下划线和美元符之外的其他特殊字符开头。
3、不能使用java关键字。


Java中的数据类型：
Java语言是一种强类型语言。通俗点说就是，在java中存储的数据都是有类型的，而且必须在编译时就确定其类型。java中有两类数据类型：基本数据类型，引用数据类型。
基本数据类型： 数值型(整数类型、浮点类型)、字符型、布尔型。
引用数据类型： 类、接口、数组。

在Java的领域里，基本数据类型变量存的是数据本身，而引用类型变量存的是保存数据的空间地址。说白了，基本数据类型变量里存储的是直接放在抽屉里的东西，而引用数据类型变量里存储的是这个抽屉的钥匙，钥匙和抽屉一一对应。

常用的基本数据类型有：
数据类型	说明	字节	应用	示例
int		整型	4	用于存储整数，如年龄、个数	int age=21;
double	双精度浮点型	8	用于存储小数，如商品价格、成绩平均分	double price=15.5;
float	单精度浮点型	4	用于存储小数，如身高	float height=175.2f;
char	字符型	2	用于存储单个字符，如性别"男"、“女”	char sex="男";
boolean	布尔型	1	表示"真"或"假"，取值只能为true或false	boolean flag=true;

String是一种常见的引用数据类型，用来表示字符串。在程序开发中，很多操作都要使用字符串来完成，例如系统中的用户名、密码、电子邮箱等。

Java中变量的使用规则：
1、java中的变量需要先声明后使用。
2、变量使用时，可以声明变量的同时进行初始化，也可以先声明后赋值。
3、变量中每次只能赋一个值，但可以修改多次。
4、main方法中定义的变量必须先赋值，然后才能输出。
5、虽然语法中没有提示错误，但在实际开发中，变量名不建议使用中文，容易产生安全隐患，譬如后期跨平台操作时出现乱码等等。

Java中的自动类型转换
需要满足特定的条件：
1、目标类型能与源类型兼容，如double型兼容int型，但char型不能兼容int型。
int类型不能自动转换为char类型。
2、目标类型大于源类型，如double类型长度为8字节，int类型为4字节，因此double类型的变量里直接可以存放int类型的数据，但反过来就不可以了。
double类型不能自动转换为int类型。



===============
2017-06-26(MON)
===============
Java中的强制类型转换
double avg1=75.8;
int avg2 = (int)avg1;
System.out.println(avg1);	//75.8
System.out.println(avg2);	//75

可以看到，通过强制类型转换将75.8赋值给int型变量后，结果为75，数值上并未进行四舍五入，而是直接将小数位截断。
强制类型转换可能会造成数据的丢失，在应用中一定要慎重使用。

Java常量的应用
所谓常量，我们可以理解为是一种特殊的变量，它的值被设定后，在程序运行过程中不允许改变。
语法：final 常量名 = 值;
例：
final String LOVE = "IMOOC";
final double PI = 3.14;

注意：常量名一般使用大写字符。
程序中使用常量可以提高代码的可维护性。

如何在Java中使用注释：
单行注释：//内容
多行注释：/*内容*/
文档注释：以/**开头，以*/结尾


什么是运算符？
运算符是一种"功能"符号，用以通知java进行相关的运算。
Java语言中常用的运算符可分为以下几种：
1)算数运算符
2)赋值运算符
3)比较运算符
4)逻辑运算符
5)条件运算符

1)算数运算符
+、-、*、/、%、++、--

例1：
int a = 5;
int b = ++a;	//++出现左边	让a先执行自增，然后将值赋给变量b	PHP先运算，后执行
System.out.println(a);	//6
System.out.println(b);	//6

例2：
int a = 5;
int b = a++;	//++出现右边	将a值赋给变量b，然后再执行自增		PHP先执行，后运算
System.out.println(a);	//6
System.out.println(b);	//5

注意：自增和自减运算符只能用于操作变量，不能直接用于操作数值或常量！

PS: %用来求余数，也称为"取模运算符"。

2)赋值运算符
=、+=、-=、*=、/=、%=

3)比较运算符
>、<、>=、<=、==、!=
注意：
1、>、<、>=、<=只支持左右两边操作数是数值类型。
2、==、!=两边的操作数既可以是数值类型，也可以是引用类型。

4)逻辑运算符
&&	与	a&&b	如果a与b都为true,则返回true。
||	或	a||b	如果a与b任一为true,则返回true。
!	非	!a		如果a为false,则返回true,即取反。
^	异或	a^b	如果a与b有仅只有一个为true，则返回true

我们可以从"投票选举"的角度理解逻辑运算符：
1、与：要求所有人都投票同意，才能通过某议题。
2、或：只要求一个投票同意就可以通过某议题。
3、非：某人原本投票同意，通过非运算符，可以使其投票无效。
4、异或：有且只能有一个人投票同意，才可以通过议题。

5)条件运算符
条件运算符( ?: )也称为"三元运算符"。
语法形式：布尔表达式?表达式1:表达式2;


Java中运算符的优先级
优先级	运算符
1	()
2	! +(正) -(负) ++ --
3	* / %
4	+(加) -(减)
5	< <= > >=
6	== !=
7	^
8	&&
9	||
10	?:
11	= += -= *= /= %=


===============
2017-07-06(THU)
===============
Java条件语句之if
语法：
if(条件){
	条件成立时执行的代码;
}
注意：如果if条件成立时的执行语句只有一条，是可以省略花括号滴!但如果执行语句有多条，那么花括号就是不可或缺的喽~~

if(条件){
	代码块1;
}else{
	代码块2;
}

if(条件1){
	代码块1;
}else if(条件2){
	代码块2;
}else{
	代码块3;
}

if(条件1){
	if(条件2){
		代码块1;
	}else{
		代码块2;
	}
}else{
	代码块3;
}

Java条件语句之switch
语法：
switch(表达式){
	case 值1:
		执行代码块1;
		break;
	case 值2:
		执行代码块2;
		break;
	case 值n:
		执行代码块n;
		break;
	default:
		默认执行的代码;
}
执行过程：当switch后表达式的值和case语句后的值相同时，从该位置开始向下执行，直到
遇到break语句或者switch语句块结束；如果没有匹配的case语句则执行default块的代码。
注意：
1、switch后面小括号中表达式的值必须是整型或字符型。
2、case后面的值可以是常量数值，如1、2；也可以是一个常量表达式，如2+2；但不能是变量或带有变量的表达式，如a*2。
3、case匹配后，执行匹配块里的程序代码，如果没有遇到break会继续执行下一个的case块内容，直到遇到break语句或者switch语句块结束。
4、可以把功能相同的case语句合并起来，如
case 1:
case 2:
	System.out.println("小于等于2");
5、default块可以出现在任意位置，也可以省略。


===============
2017-07-07(FRI)
===============
Java常用的3种循环： while、do...while、for

Java循环语句之while
语法：
while(判断条件){
	循环操作;
}
执行过程：
1、判断while后面的条件是否成立(true/false)。
2、当条件成立时，执行循环内的操作代码，然后重复执行1、2、，直到循环条件不成立为止。
特点：先判断，后执行。

Java循环语句之do...while
语法：
do{
	循环操作;
}while(判断条件);
执行过程：
1、先执行一遍循环操作，然后判断循环条件是否成立。
2、如果条件成立，继续执行1、2、，知道循环条件不成立为止。
特点：先执行，后判断。
由此可见，do...while语句保证循环至少被执行一次!

Java循环语句之for
语法：
for(循环变量初始化; 循环条件; 循环变量变化){
	循环操作;
}
执行过程：
1、执行循环变量初试化部分，设置循环的初试状态，此部分在整个循环中只执行一次。
2、进行循环条件的判断，如果条件为true，则执行循环体内代码；如果为false，直接退出循环。
3、执行循环变量变化部分，改变循环变量的值，以便进行下一次条件判断。
4、依次重新执行2、3、4、，直到退出循环。
特点：相比while和do...while语句结构更加简洁易读。
需要留心的几个小细节：
1)for关键字后面括号中的三个表达式必须用";"隔开，三个表达式都可以省略，但";"不能省略。
a.省略"循环变量初始化"，可以在for语句之前由赋值语句进行变量初始化操作，如：
int i = 0;
for(; i<10; i++){
	System.out.println("I LOVE IMOOC");
}
b.省略"循环条件"，可能会造成循环将一直执行下去，也就是我们常说的"死循环"现象，如：
for(int i=0; ; i++){
	System.out.println("I LOVE IMOOC");
}
c.省略"循环变量变化"，可以在循环体中进行循环变量的变化，如：
for(int i=0; i<10; ){
	System.out.println("I LOVE IMOOC");
	i++;
}
2)for循环变量初始化和循环变量变化部分，可以是使用";"同时初始化或改变多个循环变量的值，如：
for(int i=1,j=5; i<5; i++,j--){
	System.out.println(i+"+"+j+"="+(i+j));
}
代码中，初始化变量部分同时对两个变量i和j赋值，循环变量变化部分也同时对两个变量进行变化。
3)循环条件部分可以使用逻辑运算符组合的表达式，表示复杂判断条件，但一定注意运算的优先级。

Java循环跳转语句之break。
Java循环跳转语句之continue。

package com.imooc;
import java.util.Scanner;
public class Demo{
	public static void main(String[] args){
		Scanner input=new Scanner(System.in);//创建Scanner对象
		//print和println区别：println输出信息后会换行，而print不会换行。
		System.out.print("请输入考试成绩信息：");
		int score=input.nextInt();//获取用户输入的成绩并保存在变量中。
		int count=0;//加分的次数。
		System.out.println("加分前的成绩："+score);
		while(score <= 60){
			score++;
			count++:
		}
		System.out.println("加分后的成绩："+score);
		System.out.println("共加了"+count+"次！");
	}
}


package com.imooc;
import java.util.Scanner;
public class Demo2{
	public static void main(String[] args){
		int classNum=3;//班级数量
		int stuNum=4;//学生数量
		double sum=0;//成绩总和
		double avg=0;//成绩平均分
		Scanner input=new Scanner(System.in);//创建Scanner对象
		for(int i=1;i<=classNum;i++){
			sum = 0;
			System.out.println("***请输入第"+i+"个班级的成绩***");
			for(int j=1; j<=stuNum; j++){
				System.out.println("请输入第"+j+"个学员的成绩：");
				int score=input.nextInt();
				sum=sum+score;//成绩累加求和
			}
			avg = sum/stuNum;//计算平均分
			System.out.println("第"+i+"个班级的平均分是："+avg);
		}
	}
}

经验总结
1.通过分析，明确需求。
2.整理相关知识点。
3.梳理实现流程。
4.借助"断点跟踪"解决问题。

===============
2017-07-10(MON)
===============
数组。
int[] scores = {76,83,92,87};

如何使用Java中的数组
Java中操作数组只需要四个步骤：
1.声明数组
语法：数据类型[] 数组名;	
或者  数据类型 数组名[];
例如：
int[] scores;	//存储学生成绩的数组，类型为整型
double height[];//存储学生身高的数组，类型为浮点型
String[] names;	//存储学生姓名的数组，类型为字符串
2.分配空间
简单地说，就是制定数组中最多可存储多少个元素。
语法： 数组名 = new 数据类型[数组长度];
其中，数组长度就是数组中能存放元素的个数，如：
scores = new int[5];	//长度为5的整数数组
height = new double[5];
names = new String[5];

话说，我们也可以将上面的两个步骤合并，在声明数组的同时为它分配空间，如：
int[] scores = new int[5];
3.赋值
分配空间后就可以向数组中放数据了，数组中元素都是通过小标来访问的，例如向scores数组中存放学生成绩：
scores[0] = 89;
scores[1] = 79;
4.处理数组中数据：
我们可以对赋值后的数组进行操作和处理，如获取并输出数组中元素的值：
System.out.println("scores数组中第一个元素的值："+scores[0]);

在java中还提供了另外一种直接创建数组的方式，它将声明数组、分配空间和赋值合并完成，如：
int[] scores = {78,91,84,68};//创建一个长度为4的整型数组。
它等价于：
int[] scores = new int[]{78,91,84,68};	//第二个[]，这里必须为空，不能指定长度。

单选练习题：
下列数组的初始化正确的是( B )
A	int[] score = new int[];
B	int score[] = new int[]{34,90,87,54,24};
C	int[] score = new int[4]{90,12,34,77};
D 	int score = {78,23,44,78};
解析：
选项A需要指定数组的长度；C在声明数组的同时赋值时不能指定数组长度；D声明数组的语法错误，应为int[] score={78,23,44,78};

使用循环操作java中的数组
实际开发中我们经常使用循环控制数组成员的操作。如：
int[] score={78,91,84,68};
for(int i=0; i<scores.length; i++){
	System.out.println("数组中第"+(i+1)+"个元素的值是："+scores[i]);
}
其中，数组名.length用于获取数组的长度。

需要注意的"小毛病":
1.数组下标从0开始。
2.如果越界访问，就会报错。如：
int[] scores=new int[2];
scores[2] = 75;
运行时会报如下错误：
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 3
	at HelloWorld.main(HelloWorld.java:13)

使用Arrays类操作java中的数组：
Arrays类是Java中提供的一个工具类，在java.util包中。该类中包含了一些方法用来直接操作数组，比如可直接实现数组的排序、搜索等。
Arrays中常用的方法：
1.排序。
语法：Arrays.sort(数组名);
#按升序排列
例：
import java.util.Arrays;	//使用Arrays类时必须添加此行，导入包。
public class HelloWorld{
	public static void main(String[] args){
		//定义一个数组
		int[] scores = {78,93,97,84,63};
		//使用Arrays类的sort()方法对数组进行排序
		Arrays.sort(scores);
		System.out.println("排序后数组中元素的值：");
		//循环遍历输出数组中元素的值
		for(int i=0; i<scores.length; i++){
			System.out.println(scores[i]);
		}
	}
}
结果：63、78、84、93、97

2.将数组转换为字符串
语法：Array.toString(数组名);
如：
import java.util.Arrays;	//使用Arrays类时必须添加此行，导入包。
public static void main(String[] args){
	int[] nums = new int[]{25,7,126,53,14,86};
	System.out.println("输出数组nums中的元素："+Arrays.toString(nums));
}
结果：输出数组nums中的元素：[25,7,126,53,14,86]


使用foreach操作数组
foreach并不是java中的关键字，是for语句的特殊简化版本，在遍历数组、集合时，foreach更简单便捷。
语法：
for(元素类型 元素变量:遍历对象){
	执行的代码;
}
例：
我们分别使用for和foreach语句来遍历数组
public static void main(String[] args){
	String[] hobbys = {"imooc","爱慕课","www.imooc.com"};
	System.out.println("***使用for循环输出数组中的元素***");
	for(int i=0; i<hobbys.length; i++){
		System.out.println(hobbys[i]);
	}
	
	System.out.println();
	System.out.println("***使用foreach循环输出数组中的元素***");
	for(String hobby : hobbys){
		System.out.println(hobby);
	}
}

Java中的二维数组
所谓二维数组，可以简单的理解为是一种"特殊"的一维数组，它的每个数组空间中保存的是一个一维数组。
步骤如下：
1.声明数组并分配空间。
数据类型[][] 数组名=new 数据类型[行的个数][列的个数];
或
数据类型[][] 数组名;
数组名 = new 数据类型[行的个数][列的个数];
例：
//定义一个两行三列的二维数组
int[][] num = new int[2][3];

2.赋值。
二维数组的赋值，和以为数组类似，可以通过下标来逐个赋值，注意索引从0开始。
数组名[行的索引][列的索引] = 值;
也可以在声明数组的同时为其赋值：
数据类型[][] 数据名={{值1,值2...},{值11,值22...},{值21,值22...}};
例：
//给第一行和第一列的元素赋值
num[0][0] = 12;

3.处理数组
二维数组的访问和输出同一维数组一样，只是多了一个下标而已。在循环输出时，需要里面再内嵌一个循环，即使用二重循环来输出二维数组中的每一个元素。


如何定义Java中的方法
所谓方法，就是用来解决一类问题的代码的有序组合，是一个功能模块。
语法：
访问修饰符 返回值类型 方法名(参数列表){
	方法体;
}
其中:
1.访问修饰符：方法允许被访问的权限范围，可以是public、protected、private甚至可以省略，其中public表示该方法可以被其他任何代码调用。
2.返回值类型：方法返回值的类型，如果方法不返还任何值，则返回值类型指定为void；如果方法具有返回值，则需要指定返回值的类型，并且在方法体中使用return语句返回值。
3.方法名：定义的方法的名字，必须使用合法的标识符。
4.参数列表：传递给方法的参数列表，参数可以有多个，多个参数间以逗号隔开，每个参数由参数类型和参数名组成，以空格隔开。
例：
public class HelloWorld{
	//定义了一个方法名为print的方法，实现输出信息功能
	public void print(){
		System.out.println("Hello World");
	}
	public static void main(String[] args){
		//在main方法中调用print方法
		HelloWorld test = new HelloWorld();
		test.print();
	}
}

根据方法是否带参、是否带返回值，可将方法分为四类：
无参无返回值方法
无参带返回值方法
带参无返回值方法
带参带返回值方法


Java中无参无返回值方法的使用
如果方法不包含参数，且没有返回值，我们称为无参无返回值的方法。
方法的使用分两步：
第一步，定义方法：
public void show(){
	System.out.println("welcome to imooc.");
}
注意：
	1)方法体放在一对大括号中，实现特定的操作。
	2)方法名主要在调用这个方法时使用，需要注意命名的规范，一般采用第一个单词首字母小写，其他单词首字母大写的形式。
第二步，调用方法：
当需要调用方法执行某个操作时，可以先创建类的对象，然后通过 对象名.方法名(); 来实现。
例：
public class HelloWorld{
	public static void main(String[] args){
		//创建对象，对象名为hello
		HelloWorld hello = new HelloWorld();
		//通过 对象名.方法名() 的形式调用方法
		hello.show();
	}
	//定义方法
	public void show(){
		System.out.println("welcome to imooc.");
	}
}

Java中无参带返回值方法的使用
如果方法不包含参数，但有返回值，我们称为无参带返回值的方法。
例：
public class HelloWorld{
	public static void main(String[] args){
		//创建对象，对象名为hello
		HelloWorld hello = new HelloWorld();
		//调用方法并接收方法的返回值，保存在变量sum中
		int sum = hellow.calcSum();
		System.out.println("两数之和为："+sum);
	}
	//定义无参带返回值的方法
	public int calcSum(){	//int 返回一个整型值	calcSum方法名
		int a = 5;
		int b = 12;
		int sum = a+b;
		return sum;		//使用return返回值。
	}
}
不容忽视的"小陷阱"：
1、如果方法的返回类型为void，则方法中不能使用return返回值！
public void showInfo(){
	return "Java";
}
2、方法的返回值最多只能有一个，不能返回多个值。
public int getInfo(){
	int score1=94;
	int score2=87;
	return score1,score2;
}
3、方法返回值的类型必须兼容，例如，如果返回值类型为int，则不能返回String型值。
public int getInfo(){
	String name = "imooc";
	return name;
}


===============
2017-07-11(TUE)
===============
Java中带参无返回值方法的使用
有时方法的执行需要依赖于某些条件，话句话说，要想通过方法完成特定的功能，需要为其提供额外的信息才行。
我们先来看一个带参数，但没有返回值的方法：
public void show(String name){
	System.out.println("接收的内容为："+name);
}
调用带参方法与调用无参方法的语法类似，但在调用时必须传入实际的参数值
语法：
对象名.方法名(实参1,实参2,...,实参n);
例：
HelloWorld hello = new HelloWorld();
hello.show("你好");

运行的结果：接收的内容为：你好

很多时候，我们把定义方法是的参数称为形参，母的是用来定义方法需要传入的参数的个数和
类型；把调用方法的参数称为实参，是传递给方法真正被处理的值。

一定不可忽视的问题：
1.调用带参方法时，必须保证实参的数量、类型、顺序与形参一一对应。
例：
public class HelloWorld{
	public static void main(String args){
		HelloWorld hello = new HelloWorld();
		hello.show(25.6);	//实参与形参类型不一致
	}
	public String show(String name){
		return "欢迎您，"+name+"！";
	}
}
2.调用方法时，实参不需要指定数据类型，如：
hello.show("你好");
3.方法的参数可以是基本数据类型，如int、double等，也可以是引用数据类型，如String、数组等。
例：
import java.util.Arrays;
public class HelloWorld{
	public static void main(String[] args){
		HelloWorld hello = new HelloWorld();
		int[] score={84,91,74,62};
		hello.print(scores);	//实参为整型数组
	}
	public void print(int[] scores){	//参数为整型数组
		System.out.println(Arrays.toString(scores));	//使用Arrays类的toString方法将数组转换为字符串并输出。
	}
}
4.当方法参数有多个时，多个参数以逗号分隔。
public int calc(int num1, int num2){
	int num3 = num1+num2;
	return num3;
}


Java中带参带返回值方法的使用
如果方法既包含参数，又带返回值，我们称为带参带返回值的方法。
例：
public String show(String name){
	return "欢迎你，"+name+"！";
}
调用带参带返回值的方法：
HelloWorld hello = new HelloWorld();	//创建对象，对象名为hello
String result = hello.show("北京");
System.out.println(result);


Java中方法的重载
问：什么是方法的重载呢？
答：如果同一个类中包含了两个或两个以上方法名相同、方法参数的个数、顺序或类型不同的方法，则称为方法的重载，也可称该方法被重载了。
如下所示4个方法名称都为show，但方法的参数有所不同，因此都属于方法的重载：
例：
public void show(){	//无参方法
	System.out.println("welcome");
}
public void show( String name ){	//重载show方法，一个字符串参数
	System.out.println("welcome:"+name);
}
public void show(String name,int age){	//重载show方法，两个参数
	System.out.println("welcome:"+name);
	System.out.println("age:"+age);
}
public void show(int age, String name){	//重载show方法，两个参数顺序不同
	System.out.println("welcome2:"+name);
	System.out.println("age2:"+age);
}
问：如何区分调用的是哪个重载方法呢？
答：当调用被重载的方法时，Java会根据参数的个数和类型来判断应该调用哪个重载方法，参数完全匹配的方法将被执行。如：
public static void main(String[] args){
	HelloWorld hello = new HelloWorld();
	hello.show();	//调用无参的show方法
	hello.show("tom");//调用带有一个字符串参数的show方法
	hello.show("jack", 20);//调用带有字符串参数和整型参数的show方法
}
运行结果：
welcome
welcome:tom
welcome:jack
age:20

判断方法重载的依据：
1.必须是在同一个类中。
2.方法名相同。
3.方法参数的个数、顺序或类型不同。
4.与方法的修饰符或返回值没有关系。


/**
 * 慕课网
 * JAVA入门 第二季
 */
===============
2017-07-12(WED)
===============
什么是类和对象
面向对象
1.对象的概念
2.什么是面向对象
3.类
4.什么是对象的属性
5.什么是对象的方法
6.类与对象的关系/区别

什么是对象
万物皆对象，客观存在的事物皆为对象。

什么是面向对象

类
类是模子，确定对象将拥有的特征(属性)和行为(方法)。

类的特点
	类是对象的类型。
	具有相同属性和方法的一组对象的集合。

什么是对象的属性
	属性--对象具有的各种特征。
	每个对象的每个属性都拥有特定值。

什么是对象的方法
	方法--对象执行的操作。

类和对象的关系
	类是抽象的概念，仅仅是模板，比如说："手机"
	对象是一个你能看得到、摸得着的具体实体。
	手机类
	特征(属性)：屏幕、cpu、内存
	行为(方法)：打电话、发短信
	对象：iPhone5、iPhone5s、三星、小米

	
如何定义Java中的类
定义类
1.类的重要性：所有java程序都以类class为组织单元。
2.什么是类？
	类是模子，确定对象将拥有的特征(属性)和行为(方法)。
3.类的组成：属性和方法。
4.定义一个类的步骤：
	a.定义类名。
	b.编写类的属性。
	c.编写类的方法。
	public class 类名{
		//定义属性部分(成员变量)
		属性1的类型 属性1;
		属性2的类型 属性2;
		...
	}
例：
package com.imooc;

public class Telphone{
	//属性 有什么
	float screen;	
	float cpu;
	float mem;
	
	//方法 干什么
	void call(){
		System.out.println("Telphone有打电话的功能！");
	}
	void sendMessage(){
		System.out.println("screen："+screen+"cup："+cpu+" Telphone有发短信功能!");
	}
}


java对象
使用对象的步骤：
1.创建对象
	类名 对象名 = new 类名();
	如：Telphone phone = new Telphone();
	
2.使用对象
	引用对象的属性：对象名.属性
	例：phone.screen = 5; //给screen属性赋值5
	引用对象的方法：对象名.方法名();
	例：phone.sendMessage();//调用sendMessage()方法

例：
package com.imooc;
public class InitailTelphone{
	public static void main(String[] args){
		Telphone phone = new Telphone();	//实例化调用Telphone类
		phone.sendMessage();
		//给实例变量赋值
		//float型变量赋值时需要加f，否则默认浮点数是double型。
		phone.screen = 5.0f;
		phone.cpu = 1.4f;
		phone.mem = 2.0f;
	}
}


成员变量和局部变量
1.成员变量
	在类中定义，用来描述对象将要有什么。
2.局部变量
	在类的方法中定义，在方法中临时保存数据。

成员变量和局部变量区别
1.作用域不同
	局部变量的作用域仅限于定义它的方法。
	成员变量的作用域在整个类内部都是可见的。
2.初始值不同
	Java会给成员变量一个初始值。
	Java不会给局部变量赋予初始值。
3.在同一个方法中，不允许有同名局部变量；在不同的方法中，可以有同名局部变量。
4.两类变量同名时，局部变量具有更高的优先级。

要注意，听懂、和自己打得出来，是两个事情。

Java中的构造方法
1.使用new+构造方法 创建一个新的对象
2.构造方法是定义在java类中的一个用来初始化对象的方法，构造方法与类同名且没有返回值。
构造方法的语句格式：
public 构造方法名(){
	//初始化代码
}
3.无参构造方法的使用。
main():
	Telphone phone = new Telphone();
class Telphone:
	public Telphone(){
		System.out.println("Telphone构造方法执行了");
	}
4.带参构造方法的使用。
main():
	Telphone phone2 = new Telphone(4.0f, 2.0f, 2.0f);
class Telphone:
	public Telphone(float newScreen, float newCup, float newMem){
		screen = newScreen;
		cpu = newCpu;
		mem = newMem;
	}
-------------例-------------
Telphone.java文件
package com.imooc;
public class Telphone{
	float screen;
	float cpu;
	float mem;
	public Telphone(){
		System.out.println("无参的构造方法执行了！");
	}
	public Telphone(float newScreen, float newCpu, float newMen){
		screen = newScreen;
		cpu = newCpu;
		mem = newMem;
		System.out.println("有参的构造方法执行了！");
	}
}

InitailTelphone.java文件
package com.imooc;
public class InitailTelphone{
	public static void main(String[] args){
		//通过无参的构造方法可以创建对象
		Telphone phone = new Telphone();
		//通过有参的构造方法也可以创建对象并给对象中的实例变量赋初值
		Telphone phone2 = new Telphone(5.0f, 1.4f, 2.0f);
	}
}
--------------------------
5.当没有指定构造方法时，系统会自动添加无参的构造方法。
6.当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法。
7.构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法。
8.构造方法不但可以给对象的属性赋值，还可以保证给对象的属性一个合理的值。


Java中的static使用之静态变量
Java中被static修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，既被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。

使用static可以修饰变量、方法和代码块。
例：
public class HelloWorld{
	//static 修饰的变量为静态变量，所有类的共享hobby
	static String hobby = "imooc";
	
	public static void main(String[] args){
		//静态变量可以直接使用类名来访问，无需创建类的对象
		System.out.println("通过类名访问hobby: "+HelloWorld.hobby);
		//创建类的对象
		HelloWorld hello = new HelloWorld();
		//使用对象名来访问静态变量
		System.out.println("通过对象访问hobby："+hello.hobby);
		//使用对象名的形式修改静态变量的值
		hello.hobby="爱慕课";
		//再次使用类名访问静态变量，值已被修改
		System.out.println("通过类名访问hobby: "+HelloWorld.hobby);
	}
}
注意：静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类卸载才会进行资源回收！


===============
2017-07-13(THU)
===============
Java中的static使用之静态方法
与静态变量一样，我们也可以使用static修饰方法，称为静态方法或类方法。其实之前我们一直写的main方法就是静态方法。
静态方法的使用如：
public class HelloWorld{
	//使用static关键字声明静态方法
	public static void print(){
		System.out.println("欢迎您：慕课网！");
	}
	
	public static void main(String[] args){
		//直接使用类名调用静态方法
		HelloWorld.print();
		
		//也可以通过对象名调用，当然更推荐使用类名调用的方式
		HelloWorld demo = new HelloWorld();
		demo.print();
	}
}
需要注意：
1.静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员。
如：
public class HelloWorld{
	String name = "爱慕课";
	static String hobby = "imooc";
	
	public static void print(){
		System.out.println("欢迎您："+name);	//不能直接调用非静态变量
		System.out.println("爱好："+hobby);		//可以直接调用静态变量
	}
}
如果希望在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量。
如：
//在静态方法中调用非静态变量
public static void print(){
	//创建类的对象
	HelloWorld.hello = new HelloWorld();
	//通过对象来实现在静态方法中调用非静态变量
	System.out.println("欢迎您："+hello.name+"!");
	System.out.println("爱好："+hobby);
}
2.在普通成员方法中，则可以直接访问同类的非静态变量和静态变量，如下所示：
String name = "爱慕课";//非静态变量name
static String hobby = "imooc";//静态变量hobby
//普通成员方法可以直接访问非静态变量和静态变量
public void show(){
	System.out.println("欢迎您："+name);
	System.out.println("爱好："+hobby);
}
3.静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法。如：
//普通方法
public void show(){
	System.out.println("welcome to imooc");
}
//静态方法
public static void print(){
	System.out.println("欢迎来到爱慕课");
}
public static void main(String[] args){
	//普通成员方法必须通过对象来调用
	HelloWorld hello = new HelloWorld();
	hello.show();
	//可以直接调用静态方法
	print();
}


===============
2017-07-17(MON)
===============
Java中的static使用之静态初始化块
Java中可以通过初始化块进行数据赋值。如：
public class HelloWorld{
	String name;//定义一个成员变量
	//通过初始化块为成员变量赋值
	{
		name = "爱慕课";
	}
}
在类的声明中，可以包含多个初始化块，当创类的实例时，就会依次执行这些代码块。如果使用static修饰初始化块，就称为静态初始化块。
需要特别注意：静态初始化块只在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。
例：
public class HelloWorld{
	int num1;	//声明变量num1
	int num2;	//声明变量num2
	static int num3;	//声明静态变量num3
	public HelloWorld(){	//构造方法
		num1 = 91;
		System.out.println("通过构造方法为变量num1赋值");
	}
	{//初始化块
		num2 = 74;
		System.out.println("通过初始化块为变量num2赋值");
	}
	static {//静态初始化块
		num3 = 83;
		System.out.println("通过静态初始化块变量num3赋值");
	}
	public static void main(String[] args){
		HelloWorld hello = new HelloWorld();	//创建类的对象hello
		System.out.println("num1: "+ hello.num1);
		System.out.println("num2: "+ hello.num2);
		System.out.println("num3: "+ num3);
		HelloWorld.hello2 = new HelloWorld();//创建类的对象hello2
	}
}
运行结果：
通过静态初始化块为静态变量num3赋值
通过初始化块为变量num2赋值
通过构造方法为变量num1赋值
num1:91
num2:74
num3:83
通过初始化块为变量num2赋值
通过构造方法为变量num1赋值
总结：
通过上面的输出结果，我们可以看到，程序运行时静态初始化块最先被执行，然后执行普通初始化块，最后才执行构造方法。由于静态初始化块只在类加载时执行一次，所以当再次创建对象hello2时并未执行静态初始化块。


面向对象特性
面向对象三大特性：封装、继承、多态。

封装
1、将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。
2、好处：
	a.只能通过规定的方法访问数据。
	b.隐藏类的实例细节，方便修改和实现。
3、封装的实现步骤。		
	1)修改属性的可见性。	//设为private
	2)创建getter/setter。	//用于属性的读写
	3)在getter/setter方法中加入属性控制语句。	//对属性值的合法性进行判断

使用包管理Java中的类
Java中的包
1、包的作用
	管理Java文件
	解决同名文件冲突
2、定义包：package 包名
	注：必须放在Java源程序的第一行
	    包名间可以使用"."号隔开
		eg:com.imooc.MyClass
例如：
音乐类-MyClassMusic
-music
	com.imooc.music.MyClassMusic
-movie
	com.imooc.movie.MyClassMusic

3、系统中的包
	java.(功能).(类)
	java.lang.(类)	包含java语言基础的类
	java.util.(类)	包含java语言中各种工具类
	java.io.(类)	包含输入、输出相关功能的类
4、包的使用
	(1)可以通过import关键字，在某个文件使用其它文件中的类。
		import com.imooc.music.MyClass
	(2)Java中，包的命名规范是全小写字母拼写
	(3)使用的时候不但可以加载某个包下的所有文件
		eg:com.imooc.*
		也可以加载某个具体子包下的所有文件
		eg:com.imooc.music.*

Java中的访问修饰符
访问修饰符————可以修饰属性和方法的访问范围。
访问修饰符的总结：
访问修饰符	本类	同包	子类	其他
private		√	
默认		√		√					//没有声明修饰符
protected	√		√		√
public		√		√		√		√

Java中的this关键字
1、this关键字代表当前对象
	this.属性	操作当前对象的属性。
	this.方法	调用当前对象的方法。
2、封装对象的属性的时候，经常会使用this关键字。
例：
public class Telphone{
	private float screen;
	private float cpu;
	private float mem;
	
	public void sendMessage(){
		System.out.println("sendMessage");
	}
	
	public void setCpu(float cpu){
		this.cpu = cpu;
		this.sendMessage();
	}
}

貌似静态方法里面不可以使用this关键字？？？

什么是Java中的内部类
问：什么是内部类呢？
答：内部类(Inner Class)就是定义在另外一个类里面的类。与之对应，包含内部类的类被称为外部类。

问：那为什么要将一个类定义在另一个类里面呢？清清爽爽的独立的一个类多好啊！！
答：内部类的主要作用如下：
1.内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类。
2.内部类的方法可以直接访问外部类的所有数据，包括私有的数据。
3.内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便。

问：内部类有几种呢？
答：内部类可分为以下几种：
成员内部类
静态内部类
方法内部类
匿名内部类

例：
//外部类HelloWorld
public class HelloWorld{
	//内部类Inner,类Inner在类HelloWorld的内部
	public class Inner{
		//内部类的方法
		public void show(){
			System.out.println("welcome to imooc!");
		}
	}
	public static void main(String[] args){
		//创建外部类对象
		HelloWorld hello = new HelloWorld();
		//创建内部类对象
		Inner i = hello.new Inner();
		//调用内部类对象的方法
		i.show();
	}
}

Java中的成员内部类
内部类中最常见的就是成员内部类，也成为普通内部类。
例：
//外部类Outer
public class Outer{
	private int a = 99;//外部类的私有属性
	//内部类Inner
	public class Inner{
		int b=2;//内部类的成员属性
		public void test(){
			System.out.println("访问外部类中的a: "+a);
			System.out.println("访问内部类中的b: "+b);
		}
	}
	
	//测试成员内部类
	public static void main(String[] args){
		Outer o = new Outer();	//创建外部类对象，对象名为o
		Inner i = o.new.Inner();//使用外部类对象创建内部类对象
		i.test();//调用内部类对象的test方法
	}
}
运行结果为：
访问外部类中的a：99
访问外部类中的b：2

从上面的代码中我们可以看到，成员内部类的使用方法：
1.Inner类定义在Outer类的内部，相当于Outer类的一个成员变量的位置，Inner类可以使用任意访问控制符，如public、protected、private等。
2.Inner类中定义的test()方法可以直接访问Outer类中的数据，而不受访问控制符的影响，如直接访问Outer类中的私有属性a。
3.定义了成员内部类后，必须使用外部类对象来创建内部类对象，而不能直接去new一个内部类对象，即：内部类 对象名 = 外部类对象.new 内部类(); 
4.编译上面的程序后，会发现产生了两个.class文件。
Outer$Inner.class
Outer.class
其中，第二个是外部类的.class文件，第一个是内部类的.class文件，即成员内部类的.class文件总是这样：外部类名$内部类名.class。

另外，友情提示：
1.外部类是不能直接使用内部类的成员和方法的。
可先创建内部类的对象，然后通过内部类的对象来访问其成员变量和方法。
2.如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量和方法，如果要访问外部类的成员变量，可以使用this关键字。如：
//外部类Outer
public class Outer{
	int b=1;//外部类中的成员属性b
	//内部类Inner
	public class Inner{
		int b=2;//内部类的成员属性b
		public void test(){
			System.out.println("访问外部类中的b"+Outer.this.b);
			System.out.println("访问内部类中的b"+b);
		}
	}
}
运行结果：
	访问外部类中的b：1
	访问内部类中的b：2


===============
2017-07-19(WED)
===============
Java中的静态内部类
静态内部类是static修饰的内部类，这种内部类的特点是：
1.静态内部类不能直接访问外部类的非静态成员，但可以通过new 外部类().成员 的方式访问。
2.如果外部类的静态成员与内部类的成员名称相同，可通过"类名.静态成员"访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过"成员名"直接调用外部类的静态成员。
3.创建静态内部类的对象时，不需要外部类的对象，可以直接创建：内部类 对象名 = new 内部类();
例：
//外部类
public class SOuter{
	private int a = 99;//外部类的私有变量
	static int b = 1;//外部类的静态变量
	//静态内部类
	public static class SInner{
		int b=2;//内部类的变量
		public void test{
			System.out.println("访问外部类中的b："+SOuter.b);
			System.out.println("访问内部类中的b："+b);
		}
	}
	
	//测试静态内部类
	public static void main(String[] args){
		SInner si = new SInner();	//直接创建内部类的对象
		si.test();//调用test方法
	}
}
运行结果：
访问外部类中的b：1
访问内部类中的b：2

Java中的方法内部类
方法内部类就是内部类定义在外部类的方法中，方法内部类只在该方法的内部可见，即只在该方法内可以使用。
//外部类
public class MOuter{
	//外部类中的方法
	public void show(){
		final int a = 25;//常量名
		int b = 13;//变量
		//方法内部类
		class MInner{
			int c = 2;//内部类中的变量
			public void print(){
				System.out.println("访问外部类的方法中的常量a:"+a);
				System.out.println("访问内部类中的变量c:"+c);
			}
		}
		MInner mi = new MInner();//创建方法内部类的对象
		mi.print();//调用内部类的方法
	}
	//测试方法内部类
	public static void main(String[] args){
		MOuter mo = new MOuter();//创建外部类的对象
		mo.show();调用外部类的方法
	}
}
一定要注意哦：由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用访问控制符和static修饰符。

继承
1、继承的概念：
继承是类与类的一种关系，是一种" is a"的关系。
注：Java中的继承是单继承。
2、继承的好处：
子类拥有父类的所有属性和方法。	//private修饰的无效哦
实现代码复用。
3、语法规则：
class 子类 extends 父类
例：
class Dog extends Animal{
	......
}

方法的重写
1、什么是方法的重写：
如果子类对继承父类的方法不满意，是可以重写父类继承的方法的，
当调用方法时会优先调用子类的方法。
2、语法规则：
a.返回值类型。
b.方法名。
c.参数类型及个数。
都要与父类继承的方法相同，才叫方法的重写。

继承
继承的初始化顺序
1.初始化父类再初始化子类。
2.先执行初始化对象中属性，再执行构造方法中的初始化。

继承
final 关键字
	使用final关键字做标识有"最终的"含义
final可以修饰类、方法、属性和变量
	final修饰类，则该类不允许被继承。
	final修饰方法，则该方法不允许被覆盖(重写)。
	final修饰属性，则该类的属性不会进行隐式的初始化(类的初始化属性必须有值),或在构造方法中赋值(但只能选其一)。
	final修饰变量，则该变量的值只能赋一次值，即变为常量。

例：
package com.imooc;
final public class Animal{	//final修饰类，则该类不允许被继承。
	.....
}

public class Animal{
	public int ae = 10;
	final public void eat(){	//final修饰方法，则该方法不允许被覆盖(重写)。
		System.out.println("hello");
	}
}


===============
2017-07-20(THU)
===============
Java中的super的使用
继承
super关键字：
	在对象的内部使用，可以代表父类对象。
1.访问父类的属性
	super.age
2.访问父类的方法
	super.eat();

super的应用
1.子类的构造的过程中必须调用其父类的构造方法。
2.如果子类的构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法。
3.如果显示的调用构造方法，必须在子类的构造方法的第一行。
4.如果子类构造方法中既没有显式调用父类的构造方法，而父类又没有无参的构造方法，则编译出错。

Object类
Object类是所有类的父类，如果一个类没有使用extends关键字明确标识继承另外一个类，
那么这个类默认继承Object类。
Object类中的方法，适合所有子类。
1.toString()方法
	在Object类里面定义toString()方法的时候返回的对象的哈希code码(对象地址字符串)。
	可以通过重写toString()方法表示出对象的属性。

	
===============
2017-07-21(FRI)
===============	
2.equals()方法
	比较的是对象的引用是否指向同一块内存地址。
	Dog dog = new Dog();
	一般情况下比较两个对象时比较他的值是否一致，所以要进行重写。
	
	
多态
对象的多种形态
1.引用多态
	父类的引用可以指向本类的对象。
	父类的引用可以指向子类的对象。
2.方法多态	
	创建本类对象时，调用的方法为本类方法。
	创建子类对象时，调用的方法为子类重写的方法或者继承的方法。

-------------例：-------------
package com.imooc;
public class Animal{
	public void eat(){
		System.out.println("动物具有吃的能力");
	}
}

package com.imooc;
//继承是多态的实现基础
public class Dog extends Animal{
	public void eat(){
		System.out.println("狗是吃肉的");
	}
	public void watchDoor(){	//Dog里面独有的方法
		System.out.println("狗具有看门的能力");
	}
}	

package com.imooc;
public class Cat extends Animal{

}	

package com.imooc;
public class Initail{
	public static void main(String[] args){
		Animal obj1 = new Animal();
		Animal obj2 = new Dog();	//父类的引用可以指向子类的对象
		//Dog obj3 = new Animal();	//这种方式是错误的
		Animal obj3 = new Cat();
		
		obj1.eat();	//动物具有吃的能力
		obj2.eat();	//狗是吃肉的
		obj3.eat();	//动物具有吃的能力
		//obj2.watchDoor();	//这里不能通过父类的引用，调用子类独有的方法，这样是不允许的。
	}
}
--------------------------	

多态中的引用类型转换
引用类型转换
1.向上类型转换(隐式/自动类型转换)，是小类型到到类型的转换。(无方向)
2.向下类型转换(强制类型转换)，是大类型到小类型。(有风险)
例如杯子的水，装入到茶壶里面。
3.instanceof运算符，来解决引用对象的类型，避免类型转换的安全性问题。
-------------例：-------------
package com.imooc;
public class Initail{
	public static void main(String[] args){
		/*
		Animal obj1 = new Animal();
		Animal obj2 = new Dog();	//父类的引用可以指向子类的对象
		//Dog obj3 = new Animal();	//这种方式是错误的
		Animal obj3 = new Cat();
		
		obj1.eat();	//动物具有吃的能力
		obj2.eat();	//狗是吃肉的
		obj3.eat();	//动物具有吃的能力
		//obj2.watchDoor();	//这里不能通过父类的引用，调用子类独有的方法，这样是不允许的。
		
		*/
		Dog dog = new Dog();
		Animal animal = dog;//自动类型提升 向上类型转换
		Dog dog2 = animal;	//这里是存在风险的
		
		if(animal instanceof Dog){			
			Dog dog2 = (Dog)animal;//向下类型转换 强制类型转换
		}else{
			System.out.println("无法进行类型转换 转换成Dog类型");
		}
	
		if(animal instanceof Cat){
			Cat cat = (Cat)animal;	//报错	1.编译时Cat类型 2.运行时 Dog类型	
		}else{
			System.out.println("无法进行类型转换 转换成Cat类型");
		}
		
	}
}
--------------------------

	
Java中的抽象类
抽象类
2.应用场景：
a、在某些情况下，某个父类只是知道其子类应用包含怎样的方法，但无法准确知道这些子类如何实现这些方法。
b、从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。
3.作用：
限制规定子类必须实现某些方法，但不关注实现细节。
4.使用规则：
a. abstract定义抽象类。
b.abstract定义抽象方法，只有声明，不需要实现。
c.包含抽象方法的类是抽象类。
d.抽象类中可以包含普通的方法，也可以没有抽象方法。
e.抽象类不能直接创建，可以定义引用变量。
例：
package com.imooc;
public abstract class Telphone{
	public abstract void call(){}
	public abstract void message(){}
}


Java中的接口
1.接口概念
类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数
据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。
2.接口定义
和类定义不同，定义接口不再使用class关键字，而是使用interface关键字。
接口定义的基本语法：
[修饰符] [abstract] interface 接口名 [extends 父接口1,父接口2...]
{
	零个到多个常量定义...
	零个到多个抽象方法的定义...
}
接口就是用来被继承、被实现的，修饰符一般建议用public。
注意：不能使用private和protected修饰接口。

类是单继承的，接口是可以多继承的。
3.接口定义
常量：
	接口中的属性是常量，即使定义时不添加public static final修饰符，系统也会自动加上。
4.使用接口
一个类可以实现一个或多个接口，实现接口使用implements关键字。Java中一个类只能继承一个父类，是不够灵活的，通过实现多个接口可以做补充。
继承父类实现接口的语法为：
[修饰符] class 类名 extends 父类 implements 接口1,接口2...
{
	类体部分//如果继承了抽象类，需要实现继承的抽象方法；要实现接口中的抽象方法。
}
如果要继承父类，继承父类必须在实现接口之前

demo:
public class SmartPhone extends Telphone implements IPlayGame{
	public void playGame(){
		System.out.println("具有了玩游戏的功能");
	}
}

public class Psp implements IPlayGame{
	public void playGame(){
		System.out.println("具有了玩游戏的功能");
	}
}

public abstract interface IPlayGame{	//abstract可省略，通常不写的
	public abstract void playGame();	//abstract可省略，通常不写的
}

public class Initail{
	public static void main(String[] args){
		IPlayGame ip1 = new SmartPhone();
		ip1.playGame();
		IPlayGame ip2 = new Psp();
		ip2.playGame();
	}
}


接口
使用接口：
接口在使用过程当中，还经常与匿名内部类配合使用
匿名内部类就是没有名字的内部类，多用于关注实现而不关注实现类的名称。
语法格式：
Interface i = new Interface(){
	public void method(){
		System.out.println("匿名内部类实现接口的方式");
	}
};

===============
2017-00-00()
===============





































