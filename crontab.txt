/**
 * 慕课网
 * Linux 中的计划任务之Crontab
 * created date 2017-06-15(THU)
 * created by mAZ
 */
===============
2017-06-15(THU)
===============
相关工具：
Putty:	一个免费的易用的ssh连接工具


安装并检查Crontab服务：
1、检查cron服务
-检查cron服务是否已经安装: crontab -l
-修改cron执行任务：crontab -e
-检查crond服务是否启动： service crond status

2、安装cron
-yum install vixie-crond
-yum install crontabs

例：
每分钟都打印当前时间到一个日志文件中
*/1 * * * * date >> /tmp/log.txt

tail /tmp/log.txt	//显示文件最后的几行，非常有用


crontab的基本组成：
系统服务：crond

每分钟都会从配置文件刷新定时任务


crontab的配置文件格式
* * * * * command
| | | |	|
| | | |	`->星期0~7(0或者7表示星期天)
| | | `--->月份1~12
| | `----->日期1~31
| `-------> 小时0~23
`---------> 分钟0~59

/斜杠表示"每"

例1：
每晚的21:30重启apache
30 21 * * * service httpd restart

例2：
每月1、10、22日的4:45重启apache
45 4 1,10,22 * * service httpd restart

例3：
每月1到10日的4:45重启apache
45 4 1-10 * * service httpd restart

例4：
每隔两分钟重启apache服务器
*/2 * * * * service httpd restart
1-59/2 * * * * service httpd restart

例5：
晚上11点到早上7点之间，每个一小时重启apache
0 23-7/1 * * * service httpd restart

例6：
每天18:00至23:00之间每隔30分钟重启apache
0,30, 18-23 * * * service httpd restart
0-59/30 18-23 * * * service httpd restart


小结
-*表示任何时候都匹配
-可以用"A、B、C" 表示A或者B或者C执行命令
-可以用"A-B" 表示A或者B之间时执行命令
-可以用"*/A" 表示每A分钟(小时等)执行一次命令


crontab工具的使用
1、查看某用户的计划任务列表
2、修改某用户的计划任务
3、查看生成的最终计划任务文件
- /var/spool/cron


crontab配置文件
全局(系统)配置文件
- /etc/crontab
- 注意格式


crontab的日志
/var/log/cron 文件保存着cron的任务执行记录


crontab常见错误
1、环境变量
2、命令行双引号中使用%时，未加反斜线\
3、第三和第五个域之间执行的是"或" 操作
4、分钟设置误用


crontab的常见错误之命令行操作



===============
2017-06-16(FRI)
===============
第三和第五个域之间执行的是"或"操作
-四月的第一个星期日早晨1时59分运行a.sh
59 1 1-7 4 0 /root/a.sh			//错误的
59 1 1-7 4 * test `date + \%w` -eq 0 && /root/a.sh


crontab补充
crontab中最小只能设置到每分钟执行一个命令，如果想每半分钟执行某个命令怎么做到？
-通过shell脚本的sleep命令配合crontab即可完成这一功能
-date && sleep 0.5s && date

*/1 * * * * sleep 30s;date >> /tmp/date.log





/**
 * 慕课网
 * Linux系统管理
 * created date 2017-06-16(FRI)
 * created by mAZ
 */
系统管理
一、进程管理
二、工作管理
三、系统资源查看
四、系统定时任务 
 
 
一、进程管理
简介与分类
1、进程管理简介
2、进程的查看--ps和pstree命令
3、进程的查看--top命令
4、杀死进程
5、修改进程优先级


1、进程管理简介
1)进程简介
进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。

2)进程管理的作用
-判断服务器健康状态
-查看系统中所有进程
-杀死进程


2、进程的查看--ps和pstree命令
查看所有进程
ps aux
#查看系统中所有进程，使用BSD操作系统格式。

ps -le
#查看系统中所有进程，使用linux标准命令格式。
选项
a 	显示一个终端的所有进程，除了会话引线
u	显示进程的归属用户及内存的使用情况
x	显示没有控制终端的进程
-l	长格式显示。显示更加详细的星系
-e	显示所有进程，和-A作用一致

ps命令的输出
USER:	该进程是由哪个用户产生的；
PID: 	进程的ID号
%CPU:	该进程占用CPU资源的百分比，占用越高，进程越耗费资源；
%MEM：	该进程占用物理内存的百分比，占用越高，进程越耗费资源；
VSZ:	该进程占用虚拟内存的大小，单位KB;
RSS:	该进程占用实际物理内存的大小，单位KB；
TTY:	该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端。
STAT:	进程状态。常见的状态有：
	R:	运行
	S:	睡眠
	T:	停止状态
	s:	包含子进程
	+:	位于后台
START:	该进程的启动时间
TIME:	该进程占用CPU的运算时间，注意不是系统时间
COMMAND:产生此进程的命令名


查看进程树
[root@localhost ~]# pstree [选项]
选项：
p:	显示进程的PID
u:	显示进程的所属用户


3、进程的查看--top命令
查看系统健康状态
[root@localhost ~]# top [选项]
选项：
-d 秒数： 指定top命令每隔几秒更新。默认3秒
-b : 使用批处理模式输出。一般和"-n"选项合用
-n	次数：指定top命令执行的次数。一般和“-b”选项合用

在top命令的交互模式当中可以执行的命令：
?或h：	显示交互模式的帮助
P:		以CPU使用率排序，默认就是此项
M:		以内存的使用率排序
N：		以PID排序
q:		退出top


缓冲	加速写入的
缓存	加速读取的


4、杀死进程
1)kill命令
kill -l
#查看可用的进程信号
kill -HUP 1523

2)killall命令
killall [选项][信号] 进程名
#按照进程名杀死进程
选项：
	-i:	交互式，询问是否杀死某个进程
	-I:	忽略进程名的大小写


kill -1 2235	#重启进程	-1(这里是数字1)

kill -9 2236	#强制杀死进程

3)pkill命令
pkill [选项][信号] 进程名
#按照进程名终止进程
选项：
	-t 终端号：按照终端号提出用户

-----------按照终端号踢出用户-----------
w
#使用w命令查询本机已经登陆的用户

pkill -9 -t pts/1
#强制杀死从pts/1虚拟终端登陆的进程
(只有超级用户，才能踢出其他用户)	
---------------------------------

5、修改进程优先级
linux操作系统是一个多用户、多任务的操作系统，linux系统中通知运行着
非常多的进程。但是CPU在同一个时钟周期内只能运算一个指令。进程优先级决定
了每个进程处理的先后顺序


二、工作管理
1、工作管理简介
2、工作管理方法
3、后台命令脱离登陆终端执行


1、工作管理简介
工作管理指的是在单个登陆终端中(也就是登陆的shell界面中)同时管理多个工作的行为。

jobs	#查看正在执行的命令

注意事项：
1)当前的登陆终端，只能管理当前终端的工作，而不能管理其他登陆终端的工作。
2)放入后台的命令必须可以持续运行一段时间，这样我们才能捕捉和操作这个工作。
3)放入后台执行的命令不能和前台用户有交互或需要前台输入，否则放入后台只能暂停，而不能执行。


2、工作管理方法


===============
2017-06-19(MON)
===============
1)把进程放入后台
tar -zcf etc.tar.gz /etc &
#把命令放入后台，并在后台执行

top
#按下ctrl+z快捷键，放在后台暂停

2)查看后台的工作
jobs [-l]
选项
-l 显示工作的PID
注： “+”号代表最近一个放入后台的工作，也是工作恢复时，默认恢复的工作。
"-"号代表倒数第二个放入后台的工作。

3)将后台暂停的工作恢复到前台执行
[root@localhost ~]# fg %工作号
参数：
-%工作号：%号可以省略，但是注意工作号和PID的区别。

4)把后台暂停的工作恢复到后台执行
[root@localhost ~]# bg %工作号
注: 后台恢复执行的命令，是不能和前台有交互的，否则不能恢复到后台执行。

3、后台命令脱离登陆终端执行
简介：
把命令放入后台，只能在当前登录终端执行。一旦退出或关闭终端，后台程序就会停止。

后台命令脱离登陆终端执行的方法：
第一种方法是把需要后台执行的命令加入/etc/rc.local文件
第二种方法是使用系统定时任务，让系统在指定的时间执行某个后台命令
第三种方法是使用nohup命令

-------------举例-------------
vi for.sh
#!/bin/bash
for((i=0;i<=1000;i=i+1))	<--循环1000次
	do
		echo 11 >> /root/for.log
		sleep 10s
	done
nohup /root/for.sh &
--------------------------


三、系统资源查看
1、vmstat命令监控系统资源	**比较常用，建议背下来
vmstat [刷新延时 刷新次数]
例如：
vmstat 1 3

procs: 进程信息字段：
	r: 等待运行的进程数，数量越大，系统越繁忙。
	b: 不可被唤醒的进程数量，数量越大，系统越繁忙。

memory: 内存信息字段：
	swpd: 虚拟内存的使用情况，单位KB。
	free: 空闲的内存容量，单位KB。
	buff: 缓存的内容容量，单位KB。
	cache: 缓存的内存容量，单位KB。

swap: 交换分区的信息字段：
	si: 从磁盘中交换到内存中数据的数量，单位KB。
	so: 从内存中交换到磁盘中数据的数量，单位KB。此两个数越大，证明数据需要经常在磁盘和内存之间交换，系统性能越差。

io: 磁盘读写信息字段：
	bi: 从块设备读入数据的总量，单位是块。
	bo: 写到块设备的数据的总量，单位是块。此两个数越大，代表系统的I/O越繁忙。

system: 系统信息字段：
	in: 每秒被中断的进程次数。
	cs: 每秒钟进行的事件切换次数。此两个数越大，代表系统与接口设备的通信非常繁忙。

CPU： CPU信息字段：
	us： 非内核进程消耗CPU运算时间的百分比。
	sy:	内核进程消耗CPU运算时间的百分比。
	id: 空闲CPU的百分比。
	wa: 等待I/O所消耗的CPU百分比。
	st: 被虚拟机所盗用的CUP占比。
	
	
缓存和缓冲的区别：
简单来说缓存(cache)是用来加速数据从硬盘中"读取"的，尔
缓冲(buffer)是用来加速数据"写入"硬盘的。

2、dmesg开机时内核检测信息		**比较常用，建议背下来
dmesg

dmesg | grep CPU

3、free命令查看内存使用状态		**比较常用，建议背下来
free [-b|-k|-m|-g]
选项：
-b: 以字节为单位显示
-k: 以KB为单位显示，默认就是以KB为单位显示
-m: 以MB为单位显示
-g: 以GB为单位显示

第一行： 
total是总内存数，used是已经使用的内存数，free是空闲的内存数，shared是多个进程共享的内存总数，buffers是缓冲内存数，cached是缓存内存数。默认单位是KB。
第二行：
-/buffers/cache的内存数，相当于第一行的used-buffers-cached。+/buffers/cache的内存数，相当于第一行的free+buffers+cached。
第三行：
total是swap的总数；used是已经使用的swap数，free是空闲的swap数。默认单位是KB。

4、查看CPU信息
cat /proc/cpuinfo

5、uptime命令
uptime
#显示系统的启动时间和平均负载，也就是top命令的第一行。w命令也可以看到这个数据。

6、查看系统与内核相关信息
uname [选项]
选项：
-a：查看系统所有相关信息；
-r: 查看内核版本；
-s: 查看内核名称。

7、列出进程打开或使用的文件信息
lsof [选项]
#列出进程调用或打开的文件的信息
选项：
-c 字符串： 只列出以字符串开头的进程打开的文件
-u 用户名： 只列出某个用户的进程打开的文件
-p pid： 列出某个PID进程打开的文件

lsof | more
#查询系统中所有进程调用的文件

lsof /sbin/init
#查询某个文件被哪个进程调用

lsof -c httpd
#查看httpd进程调用了哪些文件

lsof -u root
#按照用户名，查询某用户的进程调用的文件名

四、系统定时任务
1、at一次性定时任务
2、crontab循环定时任务
3、系统的crontab设置
4、anacron配置

---------1、at一次性定时任务---------
1、确定at安装
chkconfig --list | grep atd
#at服务是否安装

service atd restart
#at服务的启动

2、at的访问控制
-如果系统中有/etc/at.allow文件，那么只有写入/etc/at.allow文件(白名单)中的
用户可以使用at命令(/etc/at.deny文件会被忽略)

-如果系统中没有/etc/at.allow文件，只有/etc/at.deny文件，那么写入/etc/at.deny文件(黑名单)中的
用户不能使用at命令。对root不起作用

-如果系统中这两个文件都不存在，那么只有root用户可以使用at命令

3、at命令
at [选项] 时间
选项：
-m: 当at工作完成后，无论是否命令有输出，都用email通知执行at命令的用户
-c 工作号: 显示该at工作的实际内容

时间：
HH:MM	例如：02:30
HH:MM YYYY-MM-DD	例如：02:30 2017-07-07
HH:MM[am|pm] [month] [date] 	例如02:30 July 25
HH:MM[am|pm] + [minutes|hours|days|weeks] 例如now + 5 minutes

4、例子1
at now + 2 minutes
#在两分钟之后执行hello.sh脚本
at > /root/hello.sh >> /root/hello.log

例子2
at 02:00 2013-07-26
#在指定的时间重启
at > /bin/sync
at > /sbin/shutdown -r now


5、其他at管理命令
atq
#查询当前服务器上的at工作

atrm [工作号]
#删除指定的at任务
------------------


2、crontab循环定时任务 ***
1)crond服务管理与访问控制
[root@localhost ~]# service crond restart	#启用crontab服务
[root@localhost ~]# chkconfig crond on	#加入开机自启

访问控制
-当系统中有/etc/cron.allow文件时，只能写入此文件的用户可以使用crontab命令，
没有写入的用户不能使用crontab命令。同样如果有此文件，/etc/cron.deny文件会被忽略，/etc/cron.allow文件的优先级更高。
-当系统中只有/etc/cron.deny文件时，则写入此文件的用户不能使用crontab命令，没有写入文件的
用户可以使用crontab命令。

2)用户的crontab设置
[root@localhost ~]# crontab [选项]
选项：
-e: 编辑crontab定时任务
-l: 查询crontab任务
-r: 删除当前用户所有的crontab任务


===============
2017-06-20(TUE)
===============
[root@localhost ~]# crontab -e
#进入crontab编辑界面。会打开vim编辑你的工作。
* * * * * 执行的任务

第一个*		一小时当中的第几分钟	0-59
第二个*		一天当中的第几小时		0-23
第三个*		一个月当中的第几天		1-31
第四个*		一年当中的第几月		1-12
第五个*		一周当中的星期几		0-7(0和7都代表星期日)

特殊符号	含义
*			代表任何时间。比如第一个*就代表一小时中每分钟都执行一次的意思。
,			代表不连续的时间。比如"0 8,12,16 * * * 命令"，就代表在每天的8点0分，12点0分，16点0分都执行一次命令。
-			代表连续的时间范围。比如"0 5 * * 1-6 命令"，代表在周一到周六的凌晨5点0分执行命令。
*/n			代表每隔多久执行一次。比如"*/10 * * * * 命令"，代表每隔10分钟就执行一遍命令。


时间		含义
45 22 * * * 命令		在22点45分执行命令
0 17 * * 1 命令			每周1的17点0分执行命令
0 5 1,15 * * 命令 		每月1号和15号的凌晨5点0分执行命令
40 4 * * 1-5 命令		每周一到周五的凌晨4点40分执行命令
*/10 4 * * * 命令 		每天的凌晨4点，每隔10分钟执行一次命令
0 0 1,15 * 1 命令		每月1号和15号，每周1的0点0分都执行一次命令。注意：星期几和几号最好不要同时出现，他们定义的都是天。非常容易让管理员混乱。


------这是一个坑------
2017年09-10月 每天凌晨的05:05:30执行一次
5 5 * 9,10 * 命令
注意：因为最小的时间范围是分钟，所以30秒不成立；最大的时间是月，所以2017年不成立。
------------

举例：
*/5 * * * * /bin/echo "11" >> /tmp/test
5 5 * * 2 /sbin/shutdown -r now
0 5 1,10,15 * * /root/sh/autobak.sh

注意：
* 5 * * * 命令	#凌晨五点整，每分钟都执行
0 5 * * * 命令  #凌晨五点0分执行一次

3)常用命令
crontab -l
#查看root用户的crontab任务

crontab -r
#删除root用户所有的定时任务

4)crontab注意事项
-六个选项都不能为空，必须填写。如果不确定使用"*"代表任意时间。
-crontab定时任务，最小有效时间是分钟，最大时间范围是月份。像2018年某时执行，3点30分30秒这样的时间都不能识别。
-在定义时间时，日期和星期最好不要在一条定时任务中同时出现，因为它们都是以天作为单位，非常容易让管理员混乱。
-在定时任务中，不管是直接写命令，还是在脚本中写命令，最好都是用绝对路径。


系统的定时任务
"crontab -e"是每个用户执行的命令，也就是说不同的用户身份可以执行自己的定时任务。可是有些定时任务需要系统执行，这是我们就需要编辑/etc/crontab这个配置文件了。
* * * * * user-name command to be executed

------------CentOS 5 中的配置文件------------
vi /etc/crontab
SHELL=/bin/bash
PATH=/sbin:/bin:/user/sbin:/usr/bin
MAILTO=root
HOME=/
#run-parts		<--命令或程序
01 * * * * root run-parts /etc/cron.hourly
02 4 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly
------------------------

执行系统的定时任务的方法
1)手工执行定时任务
2)系统定时任务
-第一种是把需要定时执行的脚本复制到/etc/cron.{daily,weekly,monthly}目录中的任意一个。
-第二种是(写到)修改/etc/crontab配置文件。


4、anacron配置及总结
anacron是什么
anacron是用来保证在系统关机的时候错过的定时任务，可以在系统开机后再执行。

anacron检测周期
-anacron会使用一天，七天，一个月作为检测周期。
-在系统的/var/spool/anacron/目录中存在cron.{daily,weekly,monthly}文件，用于记录上次执行cron的时间。
-和当前时间做比较，若果两个时间的差值超过了anacron的指定差值，证明有cron任务被执行。

anacron配置文件
vi /etc/anacrontab
- RANDOM_DELAY=45
#最大随机延迟
- START_HOURS_RANGE=3-22
#anacron的执行时间范围是3:00-22:00
- 1	5 cron.daily	nice run-parts /etc/cron.daily
- 7	25 cron.weekly	nice run-parts /etc/cron.weekly
- @monthly 45 cron.monthly nice run-parts /etc/cron.monthly
#天数 强制延迟(分) 工作名称 实际执行的命令	
	
cron.daily工作来说明执行过程：
-首先读取/var/spool/anacron/cron.daily中的上一次anacron执行的时间。
-和当前时间比较，如果两个时间的差值超过1天，就执行cron.daily工作。
-执行这个工作只能在03:00-22:00之间。
-执行工作时强制延迟时间为5分钟，再随机延迟0-45分钟时间。
-使用nice命令指定默认优先级，使用run-parts脚本执行/etc/cron.daily目录中的可执行文件。
	




	
	
	
	
	
	
	


